
TempreatureControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000e10  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001674  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004c0  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000029c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e70  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000415  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000825  00000000  00000000  00003d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  000045ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099e  00000000  00000000  00004aee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 94 05 	call	0xb28	; 0xb28 <main>
  8a:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
#include <avr/io.h>

void ADC_vInit(void)
{
	//Vref=2.56v
	SET_BIT(ADMUX, REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX, REFS1);
  94:	3f 9a       	sbi	0x07, 7	; 7
	//Enable ADC
	SET_BIT(ADCSRA, ADEN);
  96:	37 9a       	sbi	0x06, 7	; 6
	//CLK=125kHz
	SET_BIT(ADCSRA, ADPS2);
  98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA, ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
	//Vin is the difference between ADC0 and ADC1
	SET_BIT(ADMUX,MUX4);
  9c:	3c 9a       	sbi	0x07, 4	; 7
}
  9e:	08 95       	ret

000000a0 <ADC_u16Read>:

unsigned short ADC_u16Read(void)
{
	unsigned short readval;
	//Start of Conversion
	SET_BIT(ADCSRA, ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA, ADIF)==0);
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_u16Read+0x2>
	readval = (ADCL);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
	readval |= (ADCH<<8);
  aa:	45 b1       	in	r20, 0x05	; 5
  ac:	34 2f       	mov	r19, r20
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	82 2b       	or	r24, r18
  b2:	93 2b       	or	r25, r19
	return readval;
	
  b4:	08 95       	ret

000000b6 <DIO_vSetPinDir>:
#include "std_macros.h"
#include <avr/io.h>

void DIO_vSetPinDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vSetPinDir+0x6>
  ba:	71 c0       	rjmp	.+226    	; 0x19e <DIO_vSetPinDir+0xe8>
  bc:	85 34       	cpi	r24, 0x45	; 69
  be:	48 f4       	brcc	.+18     	; 0xd2 <DIO_vSetPinDir+0x1c>
  c0:	82 34       	cpi	r24, 0x42	; 66
  c2:	99 f1       	breq	.+102    	; 0x12a <DIO_vSetPinDir+0x74>
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	08 f0       	brcs	.+2      	; 0xca <DIO_vSetPinDir+0x14>
  c8:	4d c0       	rjmp	.+154    	; 0x164 <DIO_vSetPinDir+0xae>
  ca:	81 34       	cpi	r24, 0x41	; 65
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_vSetPinDir+0x1a>
  ce:	83 c0       	rjmp	.+262    	; 0x1d6 <DIO_vSetPinDir+0x120>
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <DIO_vSetPinDir+0x3a>
  d2:	82 36       	cpi	r24, 0x62	; 98
  d4:	51 f1       	breq	.+84     	; 0x12a <DIO_vSetPinDir+0x74>
  d6:	83 36       	cpi	r24, 0x63	; 99
  d8:	20 f4       	brcc	.+8      	; 0xe2 <DIO_vSetPinDir+0x2c>
  da:	81 36       	cpi	r24, 0x61	; 97
  dc:	09 f0       	breq	.+2      	; 0xe0 <DIO_vSetPinDir+0x2a>
  de:	7b c0       	rjmp	.+246    	; 0x1d6 <DIO_vSetPinDir+0x120>
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <DIO_vSetPinDir+0x3a>
  e2:	83 36       	cpi	r24, 0x63	; 99
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_vSetPinDir+0x32>
  e6:	3e c0       	rjmp	.+124    	; 0x164 <DIO_vSetPinDir+0xae>
  e8:	84 36       	cpi	r24, 0x64	; 100
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_vSetPinDir+0x38>
  ec:	74 c0       	rjmp	.+232    	; 0x1d6 <DIO_vSetPinDir+0x120>
  ee:	57 c0       	rjmp	.+174    	; 0x19e <DIO_vSetPinDir+0xe8>
	{
		case 'A':
		case 'a':
		{
			if(direction==1) SET_BIT(DDRA,pinnumber);
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	69 f4       	brne	.+26     	; 0x10e <DIO_vSetPinDir+0x58>
  f4:	2a b3       	in	r18, 0x1a	; 26
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ac 01       	movw	r20, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vSetPinDir+0x4c>
  fe:	44 0f       	add	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vSetPinDir+0x48>
 106:	ba 01       	movw	r22, r20
 108:	62 2b       	or	r22, r18
 10a:	6a bb       	out	0x1a, r22	; 26
 10c:	08 95       	ret
			else CLR_BIT(DDRA,pinnumber);
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_vSetPinDir+0x66>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_vSetPinDir+0x62>
 120:	ba 01       	movw	r22, r20
 122:	60 95       	com	r22
 124:	62 23       	and	r22, r18
 126:	6a bb       	out	0x1a, r22	; 26
 128:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			if(direction==1) SET_BIT(DDRB,pinnumber);
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_vSetPinDir+0x92>
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_vSetPinDir+0x86>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_vSetPinDir+0x82>
 140:	ba 01       	movw	r22, r20
 142:	62 2b       	or	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
			else CLR_BIT(DDRB,pinnumber);
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vSetPinDir+0xa0>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vSetPinDir+0x9c>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			if(direction==1) SET_BIT(DDRC,pinnumber);
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <DIO_vSetPinDir+0xcc>
 168:	24 b3       	in	r18, 0x14	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_vSetPinDir+0xc0>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_vSetPinDir+0xbc>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
 180:	08 95       	ret
			else CLR_BIT(DDRC,pinnumber);
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_vSetPinDir+0xda>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_vSetPinDir+0xd6>
 194:	ba 01       	movw	r22, r20
 196:	60 95       	com	r22
 198:	62 23       	and	r22, r18
 19a:	64 bb       	out	0x14, r22	; 20
 19c:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			if(direction==1) SET_BIT(DDRD,pinnumber);
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	69 f4       	brne	.+26     	; 0x1bc <DIO_vSetPinDir+0x106>
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_vSetPinDir+0xfa>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_vSetPinDir+0xf6>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17
 1ba:	08 95       	ret
			else CLR_BIT(DDRD,pinnumber);
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_vSetPinDir+0x114>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_vSetPinDir+0x110>
 1ce:	ba 01       	movw	r22, r20
 1d0:	60 95       	com	r22
 1d2:	62 23       	and	r22, r18
 1d4:	61 bb       	out	0x11, r22	; 17
 1d6:	08 95       	ret

000001d8 <DIO_vWrite>:
	}
}

void DIO_vWrite(unsigned char portname, unsigned char pinnumber, unsigned char val)
{
	switch(portname)
 1d8:	84 34       	cpi	r24, 0x44	; 68
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_vWrite+0x6>
 1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <DIO_vWrite+0xe8>
 1de:	85 34       	cpi	r24, 0x45	; 69
 1e0:	48 f4       	brcc	.+18     	; 0x1f4 <DIO_vWrite+0x1c>
 1e2:	82 34       	cpi	r24, 0x42	; 66
 1e4:	99 f1       	breq	.+102    	; 0x24c <DIO_vWrite+0x74>
 1e6:	83 34       	cpi	r24, 0x43	; 67
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_vWrite+0x14>
 1ea:	4d c0       	rjmp	.+154    	; 0x286 <DIO_vWrite+0xae>
 1ec:	81 34       	cpi	r24, 0x41	; 65
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_vWrite+0x1a>
 1f0:	83 c0       	rjmp	.+262    	; 0x2f8 <DIO_vWrite+0x120>
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <DIO_vWrite+0x3a>
 1f4:	82 36       	cpi	r24, 0x62	; 98
 1f6:	51 f1       	breq	.+84     	; 0x24c <DIO_vWrite+0x74>
 1f8:	83 36       	cpi	r24, 0x63	; 99
 1fa:	20 f4       	brcc	.+8      	; 0x204 <DIO_vWrite+0x2c>
 1fc:	81 36       	cpi	r24, 0x61	; 97
 1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_vWrite+0x2a>
 200:	7b c0       	rjmp	.+246    	; 0x2f8 <DIO_vWrite+0x120>
 202:	07 c0       	rjmp	.+14     	; 0x212 <DIO_vWrite+0x3a>
 204:	83 36       	cpi	r24, 0x63	; 99
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_vWrite+0x32>
 208:	3e c0       	rjmp	.+124    	; 0x286 <DIO_vWrite+0xae>
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	09 f0       	breq	.+2      	; 0x210 <DIO_vWrite+0x38>
 20e:	74 c0       	rjmp	.+232    	; 0x2f8 <DIO_vWrite+0x120>
 210:	57 c0       	rjmp	.+174    	; 0x2c0 <DIO_vWrite+0xe8>
	{
		case 'A':
		case 'a':
		{
			if(val==1) SET_BIT(PORTA,pinnumber);
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	69 f4       	brne	.+26     	; 0x230 <DIO_vWrite+0x58>
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vWrite+0x4c>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vWrite+0x48>
 228:	ba 01       	movw	r22, r20
 22a:	62 2b       	or	r22, r18
 22c:	6b bb       	out	0x1b, r22	; 27
 22e:	08 95       	ret
			else CLR_BIT(PORTA,pinnumber);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_vWrite+0x66>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_vWrite+0x62>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	6b bb       	out	0x1b, r22	; 27
 24a:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			if(val==1) SET_BIT(PORTB,pinnumber);
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	69 f4       	brne	.+26     	; 0x26a <DIO_vWrite+0x92>
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	ac 01       	movw	r20, r24
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_vWrite+0x86>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_vWrite+0x82>
 262:	ba 01       	movw	r22, r20
 264:	62 2b       	or	r22, r18
 266:	68 bb       	out	0x18, r22	; 24
 268:	08 95       	ret
			else CLR_BIT(PORTB,pinnumber);
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ac 01       	movw	r20, r24
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_vWrite+0xa0>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_vWrite+0x9c>
 27c:	ba 01       	movw	r22, r20
 27e:	60 95       	com	r22
 280:	62 23       	and	r22, r18
 282:	68 bb       	out	0x18, r22	; 24
 284:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			if(val==1) SET_BIT(PORTC,pinnumber);
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <DIO_vWrite+0xcc>
 28a:	25 b3       	in	r18, 0x15	; 21
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_vWrite+0xc0>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_vWrite+0xbc>
 29c:	ba 01       	movw	r22, r20
 29e:	62 2b       	or	r22, r18
 2a0:	65 bb       	out	0x15, r22	; 21
 2a2:	08 95       	ret
			else CLR_BIT(PORTC,pinnumber);
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_vWrite+0xda>
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_vWrite+0xd6>
 2b6:	ba 01       	movw	r22, r20
 2b8:	60 95       	com	r22
 2ba:	62 23       	and	r22, r18
 2bc:	65 bb       	out	0x15, r22	; 21
 2be:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			if(val==1) SET_BIT(PORTD,pinnumber);
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	69 f4       	brne	.+26     	; 0x2de <DIO_vWrite+0x106>
 2c4:	22 b3       	in	r18, 0x12	; 18
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	ac 01       	movw	r20, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_vWrite+0xfa>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_vWrite+0xf6>
 2d6:	ba 01       	movw	r22, r20
 2d8:	62 2b       	or	r22, r18
 2da:	62 bb       	out	0x12, r22	; 18
 2dc:	08 95       	ret
			else CLR_BIT(PORTD,pinnumber);
 2de:	22 b3       	in	r18, 0x12	; 18
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vWrite+0x114>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vWrite+0x110>
 2f0:	ba 01       	movw	r22, r20
 2f2:	60 95       	com	r22
 2f4:	62 23       	and	r22, r18
 2f6:	62 bb       	out	0x12, r22	; 18
 2f8:	08 95       	ret

000002fa <DIO_vToggle>:
	}
}

void DIO_vToggle(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 2fa:	84 34       	cpi	r24, 0x44	; 68
 2fc:	09 f4       	brne	.+2      	; 0x300 <DIO_vToggle+0x6>
 2fe:	3d c0       	rjmp	.+122    	; 0x37a <DIO_vToggle+0x80>
 300:	85 34       	cpi	r24, 0x45	; 69
 302:	40 f4       	brcc	.+16     	; 0x314 <DIO_vToggle+0x1a>
 304:	82 34       	cpi	r24, 0x42	; 66
 306:	f9 f0       	breq	.+62     	; 0x346 <DIO_vToggle+0x4c>
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	50 f5       	brcc	.+84     	; 0x360 <DIO_vToggle+0x66>
 30c:	81 34       	cpi	r24, 0x41	; 65
 30e:	09 f0       	breq	.+2      	; 0x312 <DIO_vToggle+0x18>
 310:	40 c0       	rjmp	.+128    	; 0x392 <DIO_vToggle+0x98>
 312:	0c c0       	rjmp	.+24     	; 0x32c <DIO_vToggle+0x32>
 314:	82 36       	cpi	r24, 0x62	; 98
 316:	b9 f0       	breq	.+46     	; 0x346 <DIO_vToggle+0x4c>
 318:	83 36       	cpi	r24, 0x63	; 99
 31a:	18 f4       	brcc	.+6      	; 0x322 <DIO_vToggle+0x28>
 31c:	81 36       	cpi	r24, 0x61	; 97
 31e:	c9 f5       	brne	.+114    	; 0x392 <DIO_vToggle+0x98>
 320:	05 c0       	rjmp	.+10     	; 0x32c <DIO_vToggle+0x32>
 322:	83 36       	cpi	r24, 0x63	; 99
 324:	e9 f0       	breq	.+58     	; 0x360 <DIO_vToggle+0x66>
 326:	84 36       	cpi	r24, 0x64	; 100
 328:	a1 f5       	brne	.+104    	; 0x392 <DIO_vToggle+0x98>
 32a:	27 c0       	rjmp	.+78     	; 0x37a <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		{
			TOG_BIT(PORTA,pinnumber);
 32c:	2b b3       	in	r18, 0x1b	; 27
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ac 01       	movw	r20, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_vToggle+0x40>
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_vToggle+0x3c>
 33e:	ba 01       	movw	r22, r20
 340:	62 27       	eor	r22, r18
 342:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 344:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			TOG_BIT(PORTB,pinnumber);
 346:	28 b3       	in	r18, 0x18	; 24
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ac 01       	movw	r20, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_vToggle+0x5a>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_vToggle+0x56>
 358:	ba 01       	movw	r22, r20
 35a:	62 27       	eor	r22, r18
 35c:	68 bb       	out	0x18, r22	; 24
		}
		break;
 35e:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			TOG_BIT(PORTC,pinnumber);
 360:	25 b3       	in	r18, 0x15	; 21
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	ac 01       	movw	r20, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_vToggle+0x74>
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_vToggle+0x70>
 372:	ba 01       	movw	r22, r20
 374:	62 27       	eor	r22, r18
 376:	65 bb       	out	0x15, r22	; 21
		}
		break;
 378:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			TOG_BIT(PORTD,pinnumber);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_vToggle+0x8e>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_vToggle+0x8a>
 38c:	ba 01       	movw	r22, r20
 38e:	62 27       	eor	r22, r18
 390:	62 bb       	out	0x12, r22	; 18
 392:	08 95       	ret

00000394 <DIO_u8read>:
	}
}

unsigned char DIO_u8read(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 394:	84 34       	cpi	r24, 0x44	; 68
 396:	09 f4       	brne	.+2      	; 0x39a <DIO_u8read+0x6>
 398:	4e c0       	rjmp	.+156    	; 0x436 <DIO_u8read+0xa2>
 39a:	85 34       	cpi	r24, 0x45	; 69
 39c:	40 f4       	brcc	.+16     	; 0x3ae <DIO_u8read+0x1a>
 39e:	82 34       	cpi	r24, 0x42	; 66
 3a0:	31 f1       	breq	.+76     	; 0x3ee <DIO_u8read+0x5a>
 3a2:	83 34       	cpi	r24, 0x43	; 67
 3a4:	b0 f5       	brcc	.+108    	; 0x412 <DIO_u8read+0x7e>
 3a6:	81 34       	cpi	r24, 0x41	; 65
 3a8:	09 f0       	breq	.+2      	; 0x3ac <DIO_u8read+0x18>
 3aa:	57 c0       	rjmp	.+174    	; 0x45a <DIO_u8read+0xc6>
 3ac:	0e c0       	rjmp	.+28     	; 0x3ca <DIO_u8read+0x36>
 3ae:	82 36       	cpi	r24, 0x62	; 98
 3b0:	f1 f0       	breq	.+60     	; 0x3ee <DIO_u8read+0x5a>
 3b2:	83 36       	cpi	r24, 0x63	; 99
 3b4:	20 f4       	brcc	.+8      	; 0x3be <DIO_u8read+0x2a>
 3b6:	81 36       	cpi	r24, 0x61	; 97
 3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO_u8read+0x28>
 3ba:	4f c0       	rjmp	.+158    	; 0x45a <DIO_u8read+0xc6>
 3bc:	06 c0       	rjmp	.+12     	; 0x3ca <DIO_u8read+0x36>
 3be:	83 36       	cpi	r24, 0x63	; 99
 3c0:	41 f1       	breq	.+80     	; 0x412 <DIO_u8read+0x7e>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_u8read+0x34>
 3c6:	49 c0       	rjmp	.+146    	; 0x45a <DIO_u8read+0xc6>
 3c8:	36 c0       	rjmp	.+108    	; 0x436 <DIO_u8read+0xa2>
	{
		case 'A':
		case 'a':
		{
			return READ_BIT(PINA,pinnumber);
 3ca:	29 b3       	in	r18, 0x19	; 25
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8read+0x44>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8read+0x40>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8read+0x54>
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8read+0x50>
 3ec:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			return READ_BIT(PINB,pinnumber);
 3ee:	26 b3       	in	r18, 0x16	; 22
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	06 2e       	mov	r0, r22
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8read+0x68>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8read+0x64>
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	82 23       	and	r24, r18
 404:	93 23       	and	r25, r19
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8read+0x78>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8read+0x74>
 410:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			return READ_BIT(PINC,pinnumber);
 412:	23 b3       	in	r18, 0x13	; 19
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8read+0x8c>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8read+0x88>
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8read+0x9c>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8read+0x98>
 434:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			return READ_BIT(PIND,pinnumber);
 436:	20 b3       	in	r18, 0x10	; 16
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	06 2e       	mov	r0, r22
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8read+0xb0>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8read+0xac>
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	82 23       	and	r24, r18
 44c:	93 23       	and	r25, r19
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_u8read+0xc0>
 450:	95 95       	asr	r25
 452:	87 95       	ror	r24
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_u8read+0xbc>
 458:	08 95       	ret
		}
		break;
	}
}
 45a:	08 95       	ret

0000045c <DIO_vSETPORTDir>:

void DIO_vSETPORTDir(unsigned char portname, unsigned char direction)
{
	switch(portname)
 45c:	84 34       	cpi	r24, 0x44	; 68
 45e:	d9 f0       	breq	.+54     	; 0x496 <DIO_vSETPORTDir+0x3a>
 460:	85 34       	cpi	r24, 0x45	; 69
 462:	38 f4       	brcc	.+14     	; 0x472 <DIO_vSETPORTDir+0x16>
 464:	82 34       	cpi	r24, 0x42	; 66
 466:	99 f0       	breq	.+38     	; 0x48e <DIO_vSETPORTDir+0x32>
 468:	83 34       	cpi	r24, 0x43	; 67
 46a:	98 f4       	brcc	.+38     	; 0x492 <DIO_vSETPORTDir+0x36>
 46c:	81 34       	cpi	r24, 0x41	; 65
 46e:	a1 f4       	brne	.+40     	; 0x498 <DIO_vSETPORTDir+0x3c>
 470:	0c c0       	rjmp	.+24     	; 0x48a <DIO_vSETPORTDir+0x2e>
 472:	82 36       	cpi	r24, 0x62	; 98
 474:	61 f0       	breq	.+24     	; 0x48e <DIO_vSETPORTDir+0x32>
 476:	83 36       	cpi	r24, 0x63	; 99
 478:	18 f4       	brcc	.+6      	; 0x480 <DIO_vSETPORTDir+0x24>
 47a:	81 36       	cpi	r24, 0x61	; 97
 47c:	69 f4       	brne	.+26     	; 0x498 <DIO_vSETPORTDir+0x3c>
 47e:	05 c0       	rjmp	.+10     	; 0x48a <DIO_vSETPORTDir+0x2e>
 480:	83 36       	cpi	r24, 0x63	; 99
 482:	39 f0       	breq	.+14     	; 0x492 <DIO_vSETPORTDir+0x36>
 484:	84 36       	cpi	r24, 0x64	; 100
 486:	41 f4       	brne	.+16     	; 0x498 <DIO_vSETPORTDir+0x3c>
 488:	06 c0       	rjmp	.+12     	; 0x496 <DIO_vSETPORTDir+0x3a>
	{
		case 'A':
		case 'a':
		{
			DDRA = direction;
 48a:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 48c:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			DDRB=direction;
 48e:	67 bb       	out	0x17, r22	; 23
		}
		break;
 490:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			DDRC=direction;
 492:	64 bb       	out	0x14, r22	; 20
		}
		break;
 494:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			DDRD=direction;
 496:	61 bb       	out	0x11, r22	; 17
 498:	08 95       	ret

0000049a <DIO_vWritePORT>:
	}
}

void DIO_vWritePORT(unsigned char portname, unsigned char val)
{
	switch(portname)
 49a:	84 34       	cpi	r24, 0x44	; 68
 49c:	d9 f0       	breq	.+54     	; 0x4d4 <DIO_vWritePORT+0x3a>
 49e:	85 34       	cpi	r24, 0x45	; 69
 4a0:	38 f4       	brcc	.+14     	; 0x4b0 <DIO_vWritePORT+0x16>
 4a2:	82 34       	cpi	r24, 0x42	; 66
 4a4:	99 f0       	breq	.+38     	; 0x4cc <DIO_vWritePORT+0x32>
 4a6:	83 34       	cpi	r24, 0x43	; 67
 4a8:	98 f4       	brcc	.+38     	; 0x4d0 <DIO_vWritePORT+0x36>
 4aa:	81 34       	cpi	r24, 0x41	; 65
 4ac:	a1 f4       	brne	.+40     	; 0x4d6 <DIO_vWritePORT+0x3c>
 4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <DIO_vWritePORT+0x2e>
 4b0:	82 36       	cpi	r24, 0x62	; 98
 4b2:	61 f0       	breq	.+24     	; 0x4cc <DIO_vWritePORT+0x32>
 4b4:	83 36       	cpi	r24, 0x63	; 99
 4b6:	18 f4       	brcc	.+6      	; 0x4be <DIO_vWritePORT+0x24>
 4b8:	81 36       	cpi	r24, 0x61	; 97
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <DIO_vWritePORT+0x3c>
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <DIO_vWritePORT+0x2e>
 4be:	83 36       	cpi	r24, 0x63	; 99
 4c0:	39 f0       	breq	.+14     	; 0x4d0 <DIO_vWritePORT+0x36>
 4c2:	84 36       	cpi	r24, 0x64	; 100
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <DIO_vWritePORT+0x3c>
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <DIO_vWritePORT+0x3a>
	{
		case 'A':
		case 'a':
		{
			PORTA=val;
 4c8:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 4ca:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB=val;
 4cc:	68 bb       	out	0x18, r22	; 24
		}
		break;
 4ce:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC=val;
 4d0:	65 bb       	out	0x15, r22	; 21
		}
		break;
 4d2:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD=val;
 4d4:	62 bb       	out	0x12, r22	; 18
 4d6:	08 95       	ret

000004d8 <DIO_vTOGPORT>:
	}
}

void DIO_vTOGPORT(unsigned char portname)
{
	switch(portname)
 4d8:	84 34       	cpi	r24, 0x44	; 68
 4da:	09 f1       	breq	.+66     	; 0x51e <DIO_vTOGPORT+0x46>
 4dc:	85 34       	cpi	r24, 0x45	; 69
 4de:	38 f4       	brcc	.+14     	; 0x4ee <DIO_vTOGPORT+0x16>
 4e0:	82 34       	cpi	r24, 0x42	; 66
 4e2:	a9 f0       	breq	.+42     	; 0x50e <DIO_vTOGPORT+0x36>
 4e4:	83 34       	cpi	r24, 0x43	; 67
 4e6:	b8 f4       	brcc	.+46     	; 0x516 <DIO_vTOGPORT+0x3e>
 4e8:	81 34       	cpi	r24, 0x41	; 65
 4ea:	e1 f4       	brne	.+56     	; 0x524 <DIO_vTOGPORT+0x4c>
 4ec:	0c c0       	rjmp	.+24     	; 0x506 <DIO_vTOGPORT+0x2e>
 4ee:	82 36       	cpi	r24, 0x62	; 98
 4f0:	71 f0       	breq	.+28     	; 0x50e <DIO_vTOGPORT+0x36>
 4f2:	83 36       	cpi	r24, 0x63	; 99
 4f4:	18 f4       	brcc	.+6      	; 0x4fc <DIO_vTOGPORT+0x24>
 4f6:	81 36       	cpi	r24, 0x61	; 97
 4f8:	a9 f4       	brne	.+42     	; 0x524 <DIO_vTOGPORT+0x4c>
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <DIO_vTOGPORT+0x2e>
 4fc:	83 36       	cpi	r24, 0x63	; 99
 4fe:	59 f0       	breq	.+22     	; 0x516 <DIO_vTOGPORT+0x3e>
 500:	84 36       	cpi	r24, 0x64	; 100
 502:	81 f4       	brne	.+32     	; 0x524 <DIO_vTOGPORT+0x4c>
 504:	0c c0       	rjmp	.+24     	; 0x51e <DIO_vTOGPORT+0x46>
	{
		case 'A':
		case 'a':
		{
			PORTA^=0xFF;
 506:	8b b3       	in	r24, 0x1b	; 27
 508:	80 95       	com	r24
 50a:	8b bb       	out	0x1b, r24	; 27
		}
		break;
 50c:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB^=0xFF;
 50e:	88 b3       	in	r24, 0x18	; 24
 510:	80 95       	com	r24
 512:	88 bb       	out	0x18, r24	; 24
		}
		break;
 514:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC^=0xFF;
 516:	85 b3       	in	r24, 0x15	; 21
 518:	80 95       	com	r24
 51a:	85 bb       	out	0x15, r24	; 21
		}
		break;
 51c:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD^=0xFF;
 51e:	82 b3       	in	r24, 0x12	; 18
 520:	80 95       	com	r24
 522:	82 bb       	out	0x12, r24	; 18
 524:	08 95       	ret

00000526 <DIO_u8ReadPort>:
		break;
	}
}
unsigned char DIO_u8ReadPort(unsigned char portname)
{
	switch(portname)
 526:	84 34       	cpi	r24, 0x44	; 68
 528:	d9 f0       	breq	.+54     	; 0x560 <DIO_u8ReadPort+0x3a>
 52a:	85 34       	cpi	r24, 0x45	; 69
 52c:	38 f4       	brcc	.+14     	; 0x53c <DIO_u8ReadPort+0x16>
 52e:	82 34       	cpi	r24, 0x42	; 66
 530:	99 f0       	breq	.+38     	; 0x558 <DIO_u8ReadPort+0x32>
 532:	83 34       	cpi	r24, 0x43	; 67
 534:	98 f4       	brcc	.+38     	; 0x55c <DIO_u8ReadPort+0x36>
 536:	81 34       	cpi	r24, 0x41	; 65
 538:	a9 f4       	brne	.+42     	; 0x564 <DIO_u8ReadPort+0x3e>
 53a:	0c c0       	rjmp	.+24     	; 0x554 <DIO_u8ReadPort+0x2e>
 53c:	82 36       	cpi	r24, 0x62	; 98
 53e:	61 f0       	breq	.+24     	; 0x558 <DIO_u8ReadPort+0x32>
 540:	83 36       	cpi	r24, 0x63	; 99
 542:	18 f4       	brcc	.+6      	; 0x54a <DIO_u8ReadPort+0x24>
 544:	81 36       	cpi	r24, 0x61	; 97
 546:	71 f4       	brne	.+28     	; 0x564 <DIO_u8ReadPort+0x3e>
 548:	05 c0       	rjmp	.+10     	; 0x554 <DIO_u8ReadPort+0x2e>
 54a:	83 36       	cpi	r24, 0x63	; 99
 54c:	39 f0       	breq	.+14     	; 0x55c <DIO_u8ReadPort+0x36>
 54e:	84 36       	cpi	r24, 0x64	; 100
 550:	49 f4       	brne	.+18     	; 0x564 <DIO_u8ReadPort+0x3e>
 552:	06 c0       	rjmp	.+12     	; 0x560 <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
		{
			return PINA;
 554:	89 b3       	in	r24, 0x19	; 25
 556:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			return PINB;
 558:	86 b3       	in	r24, 0x16	; 22
 55a:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			return PINC;
 55c:	83 b3       	in	r24, 0x13	; 19
 55e:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			return PIND;
 560:	80 b3       	in	r24, 0x10	; 16
 562:	08 95       	ret
		}
		break;
	}
}
 564:	08 95       	ret

00000566 <DIO_vWriteHighNibble>:

void DIO_vWriteHighNibble(unsigned char portname, unsigned char val)
{
	val<<=4;
 566:	62 95       	swap	r22
 568:	60 7f       	andi	r22, 0xF0	; 240
	switch (portname)
 56a:	84 34       	cpi	r24, 0x44	; 68
 56c:	51 f1       	breq	.+84     	; 0x5c2 <DIO_vWriteHighNibble+0x5c>
 56e:	85 34       	cpi	r24, 0x45	; 69
 570:	38 f4       	brcc	.+14     	; 0x580 <DIO_vWriteHighNibble+0x1a>
 572:	82 34       	cpi	r24, 0x42	; 66
 574:	c1 f0       	breq	.+48     	; 0x5a6 <DIO_vWriteHighNibble+0x40>
 576:	83 34       	cpi	r24, 0x43	; 67
 578:	e8 f4       	brcc	.+58     	; 0x5b4 <DIO_vWriteHighNibble+0x4e>
 57a:	81 34       	cpi	r24, 0x41	; 65
 57c:	41 f5       	brne	.+80     	; 0x5ce <DIO_vWriteHighNibble+0x68>
 57e:	0c c0       	rjmp	.+24     	; 0x598 <DIO_vWriteHighNibble+0x32>
 580:	82 36       	cpi	r24, 0x62	; 98
 582:	89 f0       	breq	.+34     	; 0x5a6 <DIO_vWriteHighNibble+0x40>
 584:	83 36       	cpi	r24, 0x63	; 99
 586:	18 f4       	brcc	.+6      	; 0x58e <DIO_vWriteHighNibble+0x28>
 588:	81 36       	cpi	r24, 0x61	; 97
 58a:	09 f5       	brne	.+66     	; 0x5ce <DIO_vWriteHighNibble+0x68>
 58c:	05 c0       	rjmp	.+10     	; 0x598 <DIO_vWriteHighNibble+0x32>
 58e:	83 36       	cpi	r24, 0x63	; 99
 590:	89 f0       	breq	.+34     	; 0x5b4 <DIO_vWriteHighNibble+0x4e>
 592:	84 36       	cpi	r24, 0x64	; 100
 594:	e1 f4       	brne	.+56     	; 0x5ce <DIO_vWriteHighNibble+0x68>
 596:	15 c0       	rjmp	.+42     	; 0x5c2 <DIO_vWriteHighNibble+0x5c>
	{
		case 'A':
		case 'a':
		{
			PORTA &= 0x0F; //We must ensure high nibble pins are is deasserted
 598:	8b b3       	in	r24, 0x1b	; 27
 59a:	8f 70       	andi	r24, 0x0F	; 15
 59c:	8b bb       	out	0x1b, r24	; 27
			PORTA|=val; //we then write the 4 least sig bits on the high nibbole of the port.
 59e:	8b b3       	in	r24, 0x1b	; 27
 5a0:	68 2b       	or	r22, r24
 5a2:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 5a4:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB &= 0x0F;
 5a6:	88 b3       	in	r24, 0x18	; 24
 5a8:	8f 70       	andi	r24, 0x0F	; 15
 5aa:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 5ac:	88 b3       	in	r24, 0x18	; 24
 5ae:	68 2b       	or	r22, r24
 5b0:	68 bb       	out	0x18, r22	; 24
		}
		break;
 5b2:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC &= 0x0F;
 5b4:	85 b3       	in	r24, 0x15	; 21
 5b6:	8f 70       	andi	r24, 0x0F	; 15
 5b8:	85 bb       	out	0x15, r24	; 21
			PORTC|=val;
 5ba:	85 b3       	in	r24, 0x15	; 21
 5bc:	68 2b       	or	r22, r24
 5be:	65 bb       	out	0x15, r22	; 21
		}
		break;
 5c0:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD &= 0x0F;
 5c2:	82 b3       	in	r24, 0x12	; 18
 5c4:	8f 70       	andi	r24, 0x0F	; 15
 5c6:	82 bb       	out	0x12, r24	; 18
			PORTD|=val;
 5c8:	82 b3       	in	r24, 0x12	; 18
 5ca:	68 2b       	or	r22, r24
 5cc:	62 bb       	out	0x12, r22	; 18
 5ce:	08 95       	ret

000005d0 <DIO_vWriteLowNibble>:
	}
}

void DIO_vWriteLowNibble(unsigned char portname, unsigned char val)
{
	switch (portname)
 5d0:	84 34       	cpi	r24, 0x44	; 68
 5d2:	51 f1       	breq	.+84     	; 0x628 <DIO_vWriteLowNibble+0x58>
 5d4:	85 34       	cpi	r24, 0x45	; 69
 5d6:	38 f4       	brcc	.+14     	; 0x5e6 <DIO_vWriteLowNibble+0x16>
 5d8:	82 34       	cpi	r24, 0x42	; 66
 5da:	c1 f0       	breq	.+48     	; 0x60c <DIO_vWriteLowNibble+0x3c>
 5dc:	83 34       	cpi	r24, 0x43	; 67
 5de:	e8 f4       	brcc	.+58     	; 0x61a <DIO_vWriteLowNibble+0x4a>
 5e0:	81 34       	cpi	r24, 0x41	; 65
 5e2:	41 f5       	brne	.+80     	; 0x634 <DIO_vWriteLowNibble+0x64>
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <DIO_vWriteLowNibble+0x2e>
 5e6:	82 36       	cpi	r24, 0x62	; 98
 5e8:	89 f0       	breq	.+34     	; 0x60c <DIO_vWriteLowNibble+0x3c>
 5ea:	83 36       	cpi	r24, 0x63	; 99
 5ec:	18 f4       	brcc	.+6      	; 0x5f4 <DIO_vWriteLowNibble+0x24>
 5ee:	81 36       	cpi	r24, 0x61	; 97
 5f0:	09 f5       	brne	.+66     	; 0x634 <DIO_vWriteLowNibble+0x64>
 5f2:	05 c0       	rjmp	.+10     	; 0x5fe <DIO_vWriteLowNibble+0x2e>
 5f4:	83 36       	cpi	r24, 0x63	; 99
 5f6:	89 f0       	breq	.+34     	; 0x61a <DIO_vWriteLowNibble+0x4a>
 5f8:	84 36       	cpi	r24, 0x64	; 100
 5fa:	e1 f4       	brne	.+56     	; 0x634 <DIO_vWriteLowNibble+0x64>
 5fc:	15 c0       	rjmp	.+42     	; 0x628 <DIO_vWriteLowNibble+0x58>
	{
		case 'A':
		case 'a':
		{
			PORTA &= 0xF0; //We must ensure low nibble pins are is deasserted because we will use or to write our data
 5fe:	8b b3       	in	r24, 0x1b	; 27
 600:	80 7f       	andi	r24, 0xF0	; 240
 602:	8b bb       	out	0x1b, r24	; 27
			PORTA|=val; //we then write the 4 least sig bits on the high nibble of the port.
 604:	8b b3       	in	r24, 0x1b	; 27
 606:	68 2b       	or	r22, r24
 608:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 60a:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB &= 0xF0;
 60c:	88 b3       	in	r24, 0x18	; 24
 60e:	80 7f       	andi	r24, 0xF0	; 240
 610:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 612:	88 b3       	in	r24, 0x18	; 24
 614:	68 2b       	or	r22, r24
 616:	68 bb       	out	0x18, r22	; 24
		}
		break;
 618:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC &= 0xF0;
 61a:	85 b3       	in	r24, 0x15	; 21
 61c:	80 7f       	andi	r24, 0xF0	; 240
 61e:	85 bb       	out	0x15, r24	; 21
			PORTC|=val;
 620:	85 b3       	in	r24, 0x15	; 21
 622:	68 2b       	or	r22, r24
 624:	65 bb       	out	0x15, r22	; 21
		}
		break;
 626:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD &= 0xF0;
 628:	82 b3       	in	r24, 0x12	; 18
 62a:	80 7f       	andi	r24, 0xF0	; 240
 62c:	82 bb       	out	0x12, r24	; 18
			PORTD|=val;
 62e:	82 b3       	in	r24, 0x12	; 18
 630:	68 2b       	or	r22, r24
 632:	62 bb       	out	0x12, r22	; 18
 634:	08 95       	ret

00000636 <DIO_vEnablePullUp>:
	}
}

void DIO_vEnablePullUp(unsigned char portname, unsigned char pinnumber,unsigned char en)
{
	switch(portname)
 636:	84 34       	cpi	r24, 0x44	; 68
 638:	09 f4       	brne	.+2      	; 0x63c <DIO_vEnablePullUp+0x6>
 63a:	71 c0       	rjmp	.+226    	; 0x71e <DIO_vEnablePullUp+0xe8>
 63c:	85 34       	cpi	r24, 0x45	; 69
 63e:	48 f4       	brcc	.+18     	; 0x652 <DIO_vEnablePullUp+0x1c>
 640:	82 34       	cpi	r24, 0x42	; 66
 642:	99 f1       	breq	.+102    	; 0x6aa <DIO_vEnablePullUp+0x74>
 644:	83 34       	cpi	r24, 0x43	; 67
 646:	08 f0       	brcs	.+2      	; 0x64a <DIO_vEnablePullUp+0x14>
 648:	4d c0       	rjmp	.+154    	; 0x6e4 <DIO_vEnablePullUp+0xae>
 64a:	81 34       	cpi	r24, 0x41	; 65
 64c:	09 f0       	breq	.+2      	; 0x650 <DIO_vEnablePullUp+0x1a>
 64e:	83 c0       	rjmp	.+262    	; 0x756 <DIO_vEnablePullUp+0x120>
 650:	0f c0       	rjmp	.+30     	; 0x670 <DIO_vEnablePullUp+0x3a>
 652:	82 36       	cpi	r24, 0x62	; 98
 654:	51 f1       	breq	.+84     	; 0x6aa <DIO_vEnablePullUp+0x74>
 656:	83 36       	cpi	r24, 0x63	; 99
 658:	20 f4       	brcc	.+8      	; 0x662 <DIO_vEnablePullUp+0x2c>
 65a:	81 36       	cpi	r24, 0x61	; 97
 65c:	09 f0       	breq	.+2      	; 0x660 <DIO_vEnablePullUp+0x2a>
 65e:	7b c0       	rjmp	.+246    	; 0x756 <DIO_vEnablePullUp+0x120>
 660:	07 c0       	rjmp	.+14     	; 0x670 <DIO_vEnablePullUp+0x3a>
 662:	83 36       	cpi	r24, 0x63	; 99
 664:	09 f4       	brne	.+2      	; 0x668 <DIO_vEnablePullUp+0x32>
 666:	3e c0       	rjmp	.+124    	; 0x6e4 <DIO_vEnablePullUp+0xae>
 668:	84 36       	cpi	r24, 0x64	; 100
 66a:	09 f0       	breq	.+2      	; 0x66e <DIO_vEnablePullUp+0x38>
 66c:	74 c0       	rjmp	.+232    	; 0x756 <DIO_vEnablePullUp+0x120>
 66e:	57 c0       	rjmp	.+174    	; 0x71e <DIO_vEnablePullUp+0xe8>
	{
		case 'A':
		case 'a':
		{
			if(en==1) SET_BIT(PORTA,pinnumber);
 670:	41 30       	cpi	r20, 0x01	; 1
 672:	69 f4       	brne	.+26     	; 0x68e <DIO_vEnablePullUp+0x58>
 674:	2b b3       	in	r18, 0x1b	; 27
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	ac 01       	movw	r20, r24
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_vEnablePullUp+0x4c>
 67e:	44 0f       	add	r20, r20
 680:	55 1f       	adc	r21, r21
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_vEnablePullUp+0x48>
 686:	ba 01       	movw	r22, r20
 688:	62 2b       	or	r22, r18
 68a:	6b bb       	out	0x1b, r22	; 27
 68c:	08 95       	ret
			else CLR_BIT(PORTA,pinnumber);
 68e:	2b b3       	in	r18, 0x1b	; 27
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	ac 01       	movw	r20, r24
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_vEnablePullUp+0x66>
 698:	44 0f       	add	r20, r20
 69a:	55 1f       	adc	r21, r21
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_vEnablePullUp+0x62>
 6a0:	ba 01       	movw	r22, r20
 6a2:	60 95       	com	r22
 6a4:	62 23       	and	r22, r18
 6a6:	6b bb       	out	0x1b, r22	; 27
 6a8:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		{
			if(en==1) SET_BIT(PORTB,pinnumber);
 6aa:	41 30       	cpi	r20, 0x01	; 1
 6ac:	69 f4       	brne	.+26     	; 0x6c8 <DIO_vEnablePullUp+0x92>
 6ae:	28 b3       	in	r18, 0x18	; 24
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	ac 01       	movw	r20, r24
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_vEnablePullUp+0x86>
 6b8:	44 0f       	add	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_vEnablePullUp+0x82>
 6c0:	ba 01       	movw	r22, r20
 6c2:	62 2b       	or	r22, r18
 6c4:	68 bb       	out	0x18, r22	; 24
 6c6:	08 95       	ret
			else CLR_BIT(PORTB,pinnumber);
 6c8:	28 b3       	in	r18, 0x18	; 24
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	ac 01       	movw	r20, r24
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_vEnablePullUp+0xa0>
 6d2:	44 0f       	add	r20, r20
 6d4:	55 1f       	adc	r21, r21
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_vEnablePullUp+0x9c>
 6da:	ba 01       	movw	r22, r20
 6dc:	60 95       	com	r22
 6de:	62 23       	and	r22, r18
 6e0:	68 bb       	out	0x18, r22	; 24
 6e2:	08 95       	ret
		
		
		case 'C':
		case 'c':
		{
			if(en==1) SET_BIT(PORTC,pinnumber);
 6e4:	41 30       	cpi	r20, 0x01	; 1
 6e6:	69 f4       	brne	.+26     	; 0x702 <DIO_vEnablePullUp+0xcc>
 6e8:	25 b3       	in	r18, 0x15	; 21
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	ac 01       	movw	r20, r24
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_vEnablePullUp+0xc0>
 6f2:	44 0f       	add	r20, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	6a 95       	dec	r22
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_vEnablePullUp+0xbc>
 6fa:	ba 01       	movw	r22, r20
 6fc:	62 2b       	or	r22, r18
 6fe:	65 bb       	out	0x15, r22	; 21
 700:	08 95       	ret
			else CLR_BIT(PORTC,pinnumber);
 702:	25 b3       	in	r18, 0x15	; 21
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	ac 01       	movw	r20, r24
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_vEnablePullUp+0xda>
 70c:	44 0f       	add	r20, r20
 70e:	55 1f       	adc	r21, r21
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_vEnablePullUp+0xd6>
 714:	ba 01       	movw	r22, r20
 716:	60 95       	com	r22
 718:	62 23       	and	r22, r18
 71a:	65 bb       	out	0x15, r22	; 21
 71c:	08 95       	ret
		
		
		case 'D':
		case 'd':
		{
			if(en==1) SET_BIT(PORTD,pinnumber);
 71e:	41 30       	cpi	r20, 0x01	; 1
 720:	69 f4       	brne	.+26     	; 0x73c <DIO_vEnablePullUp+0x106>
 722:	22 b3       	in	r18, 0x12	; 18
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	ac 01       	movw	r20, r24
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_vEnablePullUp+0xfa>
 72c:	44 0f       	add	r20, r20
 72e:	55 1f       	adc	r21, r21
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_vEnablePullUp+0xf6>
 734:	ba 01       	movw	r22, r20
 736:	62 2b       	or	r22, r18
 738:	62 bb       	out	0x12, r22	; 18
 73a:	08 95       	ret
			else CLR_BIT(PORTD,pinnumber);
 73c:	22 b3       	in	r18, 0x12	; 18
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	ac 01       	movw	r20, r24
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_vEnablePullUp+0x114>
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_vEnablePullUp+0x110>
 74e:	ba 01       	movw	r22, r20
 750:	60 95       	com	r22
 752:	62 23       	and	r22, r18
 754:	62 bb       	out	0x12, r22	; 18
 756:	08 95       	ret

00000758 <peekaboo>:
}


static void peekaboo(void)
{
	DIO_vWrite(CTRL_PORT,EN,1);
 758:	83 e4       	ldi	r24, 0x43	; 67
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 768:	83 ef       	ldi	r24, 0xF3	; 243
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <peekaboo+0x14>
 770:	00 c0       	rjmp	.+0      	; 0x772 <peekaboo+0x1a>
 772:	00 00       	nop
	_delay_ms(2);
	DIO_vWrite(CTRL_PORT,EN,0);
 774:	83 e4       	ldi	r24, 0x43	; 67
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	40 e0       	ldi	r20, 0x00	; 0
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
 784:	83 ef       	ldi	r24, 0xF3	; 243
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <peekaboo+0x30>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <peekaboo+0x36>
 78e:	00 00       	nop
	_delay_ms(2);
}
 790:	08 95       	ret

00000792 <LCD_vSend_cmd>:

void LCD_vSend_cmd(char cmd)
{
 792:	cf 93       	push	r28
 794:	c8 2f       	mov	r28, r24
	DIO_vWritePORT(LCD_PORT,cmd);
	DIO_vWrite(CTRL_PORT,RS,0);
	peekaboo();
	_delay_ms(1);
	#elif defined FOUR_BITS_MODE
	DIO_vWriteHighNibble(LCD_PORT,(cmd>>4));
 796:	68 2f       	mov	r22, r24
 798:	62 95       	swap	r22
 79a:	6f 70       	andi	r22, 0x0F	; 15
 79c:	83 e4       	ldi	r24, 0x43	; 67
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,0);
 7a6:	83 e4       	ldi	r24, 0x43	; 67
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	63 e0       	ldi	r22, 0x03	; 3
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	peekaboo();
 7b6:	0e 94 ac 03 	call	0x758	; 0x758 <peekaboo>
	DIO_vWriteHighNibble(LCD_PORT,cmd);
 7ba:	83 e4       	ldi	r24, 0x43	; 67
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	6c 2f       	mov	r22, r28
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,0);
 7c6:	83 e4       	ldi	r24, 0x43	; 67
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	63 e0       	ldi	r22, 0x03	; 3
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	peekaboo();
 7d6:	0e 94 ac 03 	call	0x758	; 0x758 <peekaboo>
 7da:	89 ef       	ldi	r24, 0xF9	; 249
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <LCD_vSend_cmd+0x4c>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <LCD_vSend_cmd+0x52>
 7e4:	00 00       	nop
	#endif
	_delay_ms(1);
	
}
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <LCD_vInit>:
	LCD_vSend_cmd(CLR_SCREEN);
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined FOUR_BITS_MODE
	DIO_vSetPinDir(LCD_PORT,4,1);
 7ea:	83 e4       	ldi	r24, 0x43	; 67
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	64 e0       	ldi	r22, 0x04	; 4
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT,5,1);
 7fa:	83 e4       	ldi	r24, 0x43	; 67
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	65 e0       	ldi	r22, 0x05	; 5
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	41 e0       	ldi	r20, 0x01	; 1
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT,6,1);
 80a:	83 e4       	ldi	r24, 0x43	; 67
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	66 e0       	ldi	r22, 0x06	; 6
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT,7,1);
 81a:	83 e4       	ldi	r24, 0x43	; 67
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	67 e0       	ldi	r22, 0x07	; 7
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(CTRL_PORT,EN,1);
 82a:	83 e4       	ldi	r24, 0x43	; 67
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	61 e0       	ldi	r22, 0x01	; 1
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(CTRL_PORT,RS,1);
 83a:	83 e4       	ldi	r24, 0x43	; 67
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	63 e0       	ldi	r22, 0x03	; 3
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(CTRL_PORT,RW,1);
 84a:	83 e4       	ldi	r24, 0x43	; 67
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	62 e0       	ldi	r22, 0x02	; 2
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	41 e0       	ldi	r20, 0x01	; 1
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vWrite(CTRL_PORT,RW,0);
 85a:	83 e4       	ldi	r24, 0x43	; 67
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	62 e0       	ldi	r22, 0x02	; 2
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	40 e0       	ldi	r20, 0x00	; 0
 864:	50 e0       	ldi	r21, 0x00	; 0
 866:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	LCD_vSend_cmd(RETURN_HOME);
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 870:	83 ec       	ldi	r24, 0xC3	; 195
 872:	99 e0       	ldi	r25, 0x09	; 9
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <__stack+0x15>
 878:	00 c0       	rjmp	.+0      	; 0x87a <__stack+0x1b>
 87a:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS);
 87c:	88 e2       	ldi	r24, 0x28	; 40
 87e:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 882:	89 ef       	ldi	r24, 0xF9	; 249
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	f1 f7       	brne	.-4      	; 0x886 <__stack+0x27>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
 88c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_OFF_DISPLAY_ON);
 88e:	8c e0       	ldi	r24, 0x0C	; 12
 890:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 894:	89 ef       	ldi	r24, 0xF9	; 249
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <__stack+0x3f>
 89e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 8a6:	83 ec       	ldi	r24, 0xC3	; 195
 8a8:	99 e0       	ldi	r25, 0x09	; 9
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <__stack+0x4b>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__stack+0x51>
 8b0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
 8b2:	86 e0       	ldi	r24, 0x06	; 6
 8b4:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 8b8:	89 ef       	ldi	r24, 0xF9	; 249
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <__stack+0x5d>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <__stack+0x63>
 8c2:	00 00       	nop
	_delay_ms(1);
	#endif
}
 8c4:	08 95       	ret

000008c6 <LCD_vSend_char>:
	_delay_ms(1);
	
}

void LCD_vSend_char(char chr)
{
 8c6:	cf 93       	push	r28
 8c8:	c8 2f       	mov	r28, r24
	DIO_vWritePORT(LCD_PORT,chr);
	DIO_vWrite(CTRL_PORT,RS,1);
	peekaboo();
	_delay_ms(1);
	#elif defined FOUR_BITS_MODE
	DIO_vWriteHighNibble(LCD_PORT,(chr>>4));
 8ca:	68 2f       	mov	r22, r24
 8cc:	62 95       	swap	r22
 8ce:	6f 70       	andi	r22, 0x0F	; 15
 8d0:	83 e4       	ldi	r24, 0x43	; 67
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,1);
 8da:	83 e4       	ldi	r24, 0x43	; 67
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	63 e0       	ldi	r22, 0x03	; 3
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	41 e0       	ldi	r20, 0x01	; 1
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	peekaboo();
 8ea:	0e 94 ac 03 	call	0x758	; 0x758 <peekaboo>
	DIO_vWriteHighNibble(LCD_PORT,chr);
 8ee:	83 e4       	ldi	r24, 0x43	; 67
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	6c 2f       	mov	r22, r28
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,1);
 8fa:	83 e4       	ldi	r24, 0x43	; 67
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	63 e0       	ldi	r22, 0x03	; 3
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	41 e0       	ldi	r20, 0x01	; 1
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	peekaboo();
 90a:	0e 94 ac 03 	call	0x758	; 0x758 <peekaboo>
	#endif
}
 90e:	cf 91       	pop	r28
 910:	08 95       	ret

00000912 <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 918:	88 81       	ld	r24, Y
 91a:	88 23       	and	r24, r24
 91c:	31 f0       	breq	.+12     	; 0x92a <LCD_vSend_string+0x18>
	DIO_vWrite(CTRL_PORT,RS,1);
	peekaboo();
	#endif
}

void LCD_vSend_string(char *data)
 91e:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 920:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 924:	89 91       	ld	r24, Y+
 926:	88 23       	and	r24, r24
 928:	d9 f7       	brne	.-10     	; 0x920 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 936:	83 ec       	ldi	r24, 0xC3	; 195
 938:	99 e0       	ldi	r25, 0x09	; 9
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	f1 f7       	brne	.-4      	; 0x93a <LCD_clearscreen+0xa>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <LCD_clearscreen+0x10>
 940:	00 00       	nop
	_delay_ms(10);
}
 942:	08 95       	ret

00000944 <LCD_movecursor>:

void LCD_movecursor(char row, char column)
{
	char pos=0;
	if(row==1)
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	19 f4       	brne	.+6      	; 0x94e <LCD_movecursor+0xa>
	{
		pos=(0x80)+column-1;
 948:	86 2f       	mov	r24, r22
 94a:	81 58       	subi	r24, 0x81	; 129
 94c:	06 c0       	rjmp	.+12     	; 0x95a <LCD_movecursor+0x16>
	}
	else if(row==2)
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	19 f4       	brne	.+6      	; 0x958 <LCD_movecursor+0x14>
	{
		pos=(0xC0)+column-1;
 952:	86 2f       	mov	r24, r22
 954:	81 54       	subi	r24, 0x41	; 65
 956:	01 c0       	rjmp	.+2      	; 0x95a <LCD_movecursor+0x16>
	}
	else
	{
		pos=0x80;
 958:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_vSend_cmd(pos);
 95a:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_cmd>
 95e:	89 ef       	ldi	r24, 0xF9	; 249
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	01 97       	sbiw	r24, 0x01	; 1
 964:	f1 f7       	brne	.-4      	; 0x962 <LCD_movecursor+0x1e>
 966:	00 c0       	rjmp	.+0      	; 0x968 <LCD_movecursor+0x24>
 968:	00 00       	nop
	_delay_ms(1);
}
 96a:	08 95       	ret

0000096c <Motor_vInit>:
 */ 

#include "DIO.h"

void Motor_vInit(unsigned char portname, unsigned char in1, unsigned char in2, unsigned char en)
{
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	c8 2f       	mov	r28, r24
 974:	16 2f       	mov	r17, r22
 976:	d4 2f       	mov	r29, r20
	DIO_vSetPinDir(portname,en,1);
 978:	62 2f       	mov	r22, r18
 97a:	41 e0       	ldi	r20, 0x01	; 1
 97c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(portname,in1,1);
 980:	8c 2f       	mov	r24, r28
 982:	61 2f       	mov	r22, r17
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
	DIO_vSetPinDir(portname,in2,1);
 98a:	8c 2f       	mov	r24, r28
 98c:	6d 2f       	mov	r22, r29
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vSetPinDir>
}
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	08 95       	ret

0000099c <MotorON>:

void MotorON(unsigned char portname,unsigned char in1, unsigned char in2, unsigned char en, unsigned char dir)
{
 99c:	0f 93       	push	r16
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	c8 2f       	mov	r28, r24
 9a4:	d4 2f       	mov	r29, r20
	switch(dir)
 9a6:	03 34       	cpi	r16, 0x43	; 67
 9a8:	49 f0       	breq	.+18     	; 0x9bc <MotorON+0x20>
 9aa:	04 34       	cpi	r16, 0x44	; 68
 9ac:	18 f4       	brcc	.+6      	; 0x9b4 <MotorON+0x18>
 9ae:	01 34       	cpi	r16, 0x41	; 65
 9b0:	c1 f4       	brne	.+48     	; 0x9e2 <MotorON+0x46>
 9b2:	0e c0       	rjmp	.+28     	; 0x9d0 <MotorON+0x34>
 9b4:	01 36       	cpi	r16, 0x61	; 97
 9b6:	61 f0       	breq	.+24     	; 0x9d0 <MotorON+0x34>
 9b8:	03 36       	cpi	r16, 0x63	; 99
 9ba:	99 f4       	brne	.+38     	; 0x9e2 <MotorON+0x46>
	{
		case 'C':
		case 'c':
		{
			DIO_vWrite(portname,in1,1);
 9bc:	8c 2f       	mov	r24, r28
 9be:	41 e0       	ldi	r20, 0x01	; 1
 9c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
			DIO_vWrite(portname,in2,0);
 9c4:	8c 2f       	mov	r24, r28
 9c6:	6d 2f       	mov	r22, r29
 9c8:	40 e0       	ldi	r20, 0x00	; 0
 9ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
		}
		break;
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <MotorON+0x46>
		
		case 'A':
		case 'a':
		{
			DIO_vWrite(portname,in1,0);
 9d0:	8c 2f       	mov	r24, r28
 9d2:	40 e0       	ldi	r20, 0x00	; 0
 9d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
			DIO_vWrite(portname,in2,1);
 9d8:	8c 2f       	mov	r24, r28
 9da:	6d 2f       	mov	r22, r29
 9dc:	41 e0       	ldi	r20, 0x01	; 1
 9de:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
		}
		break;
	}	
}
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	0f 91       	pop	r16
 9e8:	08 95       	ret

000009ea <MotorOff>:

void MotorOff(unsigned char portname, unsigned char in1, unsigned char in2)
{
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	c8 2f       	mov	r28, r24
 9f0:	d4 2f       	mov	r29, r20
	DIO_vWrite(portname, in1, 0);
 9f2:	40 e0       	ldi	r20, 0x00	; 0
 9f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
	DIO_vWrite(portname, in2, 0);
 9f8:	8c 2f       	mov	r24, r28
 9fa:	6d 2f       	mov	r22, r29
 9fc:	40 e0       	ldi	r20, 0x00	; 0
 9fe:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_vWrite>
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	08 95       	ret

00000a08 <displayTemp>:
		
    }
}

char displayTemp(void)
{
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
	unsigned short volt;
	unsigned char temp;
	volt = 2.5*ADC_u16Read();
 a0c:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_u16Read>
 a10:	bc 01       	movw	r22, r24
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 f5 05 	call	0xbea	; 0xbea <__floatunsisf>
 a1a:	20 e0       	ldi	r18, 0x00	; 0
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	40 e2       	ldi	r20, 0x20	; 32
 a20:	50 e4       	ldi	r21, 0x40	; 64
 a22:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 a26:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fixunssfsi>
	if(volt<1000)
 a2a:	83 e0       	ldi	r24, 0x03	; 3
 a2c:	68 3e       	cpi	r22, 0xE8	; 232
 a2e:	78 07       	cpc	r23, r24
 a30:	e8 f5       	brcc	.+122    	; 0xaac <displayTemp+0xa4>
	{
		temp = (1000-volt)/10;
 a32:	88 ee       	ldi	r24, 0xE8	; 232
 a34:	93 e0       	ldi	r25, 0x03	; 3
 a36:	86 1b       	sub	r24, r22
 a38:	97 0b       	sbc	r25, r23
 a3a:	6a e0       	ldi	r22, 0x0A	; 10
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	0e 94 f2 06 	call	0xde4	; 0xde4 <__udivmodhi4>
 a42:	c6 2f       	mov	r28, r22
		
		if(temp<10)
 a44:	6a 30       	cpi	r22, 0x0A	; 10
 a46:	a8 f4       	brcc	.+42     	; 0xa72 <displayTemp+0x6a>
		{
			LCD_movecursor(1,7);
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	67 e0       	ldi	r22, 0x07	; 7
 a4c:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
			LCD_vSend_char('-');
 a50:	8d e2       	ldi	r24, 0x2D	; 45
 a52:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(temp+48);
 a56:	8c 2f       	mov	r24, r28
 a58:	80 5d       	subi	r24, 0xD0	; 208
 a5a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0xDF);
 a5e:	8f ed       	ldi	r24, 0xDF	; 223
 a60:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char('C');
 a64:	83 e4       	ldi	r24, 0x43	; 67
 a66:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0x20);
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
 a70:	57 c0       	rjmp	.+174    	; 0xb20 <displayTemp+0x118>
		}
		else if(temp<100)
 a72:	64 36       	cpi	r22, 0x64	; 100
 a74:	08 f0       	brcs	.+2      	; 0xa78 <displayTemp+0x70>
 a76:	54 c0       	rjmp	.+168    	; 0xb20 <displayTemp+0x118>
		{
			LCD_movecursor(1,7);
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	67 e0       	ldi	r22, 0x07	; 7
 a7c:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
			LCD_vSend_char('-');
 a80:	8d e2       	ldi	r24, 0x2D	; 45
 a82:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char((temp/10)+48);
 a86:	8c 2f       	mov	r24, r28
 a88:	6a e0       	ldi	r22, 0x0A	; 10
 a8a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__udivmodqi4>
 a8e:	d9 2f       	mov	r29, r25
 a90:	80 5d       	subi	r24, 0xD0	; 208
 a92:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char((temp%10)+48);
 a96:	8d 2f       	mov	r24, r29
 a98:	80 5d       	subi	r24, 0xD0	; 208
 a9a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0xDF);
 a9e:	8f ed       	ldi	r24, 0xDF	; 223
 aa0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char('C');
 aa4:	83 e4       	ldi	r24, 0x43	; 67
 aa6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
 aaa:	3a c0       	rjmp	.+116    	; 0xb20 <displayTemp+0x118>
			
		}
	}
	else if(volt>=1000)
	{
		temp = (volt-1000)/10;
 aac:	cb 01       	movw	r24, r22
 aae:	88 5e       	subi	r24, 0xE8	; 232
 ab0:	93 40       	sbci	r25, 0x03	; 3
 ab2:	6a e0       	ldi	r22, 0x0A	; 10
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	0e 94 f2 06 	call	0xde4	; 0xde4 <__udivmodhi4>
 aba:	c6 2f       	mov	r28, r22
		
		if(temp<10)
 abc:	6a 30       	cpi	r22, 0x0A	; 10
 abe:	a8 f4       	brcc	.+42     	; 0xaea <displayTemp+0xe2>
		{
			LCD_movecursor(1,7);
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	67 e0       	ldi	r22, 0x07	; 7
 ac4:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
			LCD_vSend_char(temp+48);
 ac8:	8c 2f       	mov	r24, r28
 aca:	80 5d       	subi	r24, 0xD0	; 208
 acc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0xDF);
 ad0:	8f ed       	ldi	r24, 0xDF	; 223
 ad2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char('C');
 ad6:	83 e4       	ldi	r24, 0x43	; 67
 ad8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0x20);
 adc:	80 e2       	ldi	r24, 0x20	; 32
 ade:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0x20);
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
 ae8:	1b c0       	rjmp	.+54     	; 0xb20 <displayTemp+0x118>
		}
		else if(temp<100)
 aea:	64 36       	cpi	r22, 0x64	; 100
 aec:	c8 f4       	brcc	.+50     	; 0xb20 <displayTemp+0x118>
		{
			LCD_movecursor(1,7);
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	67 e0       	ldi	r22, 0x07	; 7
 af2:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
			LCD_vSend_char((temp/10)+48);
 af6:	8c 2f       	mov	r24, r28
 af8:	6a e0       	ldi	r22, 0x0A	; 10
 afa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__udivmodqi4>
 afe:	d9 2f       	mov	r29, r25
 b00:	80 5d       	subi	r24, 0xD0	; 208
 b02:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char((temp%10)+48);
 b06:	8d 2f       	mov	r24, r29
 b08:	80 5d       	subi	r24, 0xD0	; 208
 b0a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0xDF);
 b0e:	8f ed       	ldi	r24, 0xDF	; 223
 b10:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char('C');
 b14:	83 e4       	ldi	r24, 0x43	; 67
 b16:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
			LCD_vSend_char(0x20);
 b1a:	80 e2       	ldi	r24, 0x20	; 32
 b1c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_vSend_char>
	{
		
	}
	
	return temp;
 b20:	8c 2f       	mov	r24, r28
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	08 95       	ret

00000b28 <main>:

char displayTemp(void);

int main(void)
{
	LCD_vInit();
 b28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_vInit>
	ADC_vInit();
 b2c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	Motor_vInit('D',1,2,0);
 b30:	84 e4       	ldi	r24, 0x44	; 68
 b32:	61 e0       	ldi	r22, 0x01	; 1
 b34:	42 e0       	ldi	r20, 0x02	; 2
 b36:	20 e0       	ldi	r18, 0x00	; 0
 b38:	0e 94 b6 04 	call	0x96c	; 0x96c <Motor_vInit>
	Motor_vInit('D',6,7,5);
 b3c:	84 e4       	ldi	r24, 0x44	; 68
 b3e:	66 e0       	ldi	r22, 0x06	; 6
 b40:	47 e0       	ldi	r20, 0x07	; 7
 b42:	25 e0       	ldi	r18, 0x05	; 5
 b44:	0e 94 b6 04 	call	0x96c	; 0x96c <Motor_vInit>
	LCD_vSend_string("Temp: ");
 b48:	80 e6       	ldi	r24, 0x60	; 96
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
	char temperature;
    while(1)
    {
        //TODO:: Please write your application code 
		temperature = displayTemp();
 b50:	0e 94 04 05 	call	0xa08	; 0xa08 <displayTemp>
		if(temperature>=30)
 b54:	8e 31       	cpi	r24, 0x1E	; 30
 b56:	40 f0       	brcs	.+16     	; 0xb68 <main+0x40>
		{
			MotorON('D',1,2,0,'C');
 b58:	84 e4       	ldi	r24, 0x44	; 68
 b5a:	61 e0       	ldi	r22, 0x01	; 1
 b5c:	42 e0       	ldi	r20, 0x02	; 2
 b5e:	20 e0       	ldi	r18, 0x00	; 0
 b60:	03 e4       	ldi	r16, 0x43	; 67
 b62:	0e 94 ce 04 	call	0x99c	; 0x99c <MotorON>
 b66:	f4 cf       	rjmp	.-24     	; 0xb50 <main+0x28>
		}
		else if(temperature>15)
 b68:	80 31       	cpi	r24, 0x10	; 16
 b6a:	58 f0       	brcs	.+22     	; 0xb82 <main+0x5a>
		{
			MotorOff('D',6,7);
 b6c:	84 e4       	ldi	r24, 0x44	; 68
 b6e:	66 e0       	ldi	r22, 0x06	; 6
 b70:	47 e0       	ldi	r20, 0x07	; 7
 b72:	0e 94 f5 04 	call	0x9ea	; 0x9ea <MotorOff>
			MotorOff('D',1,2);
 b76:	84 e4       	ldi	r24, 0x44	; 68
 b78:	61 e0       	ldi	r22, 0x01	; 1
 b7a:	42 e0       	ldi	r20, 0x02	; 2
 b7c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <MotorOff>
 b80:	e7 cf       	rjmp	.-50     	; 0xb50 <main+0x28>
		}
		else if(temperature<=15)
		{
			MotorON('D',6,7,5,'C');
 b82:	84 e4       	ldi	r24, 0x44	; 68
 b84:	66 e0       	ldi	r22, 0x06	; 6
 b86:	47 e0       	ldi	r20, 0x07	; 7
 b88:	25 e0       	ldi	r18, 0x05	; 5
 b8a:	03 e4       	ldi	r16, 0x43	; 67
 b8c:	0e 94 ce 04 	call	0x99c	; 0x99c <MotorON>
 b90:	df cf       	rjmp	.-66     	; 0xb50 <main+0x28>

00000b92 <__fixunssfsi>:
 b92:	70 d0       	rcall	.+224    	; 0xc74 <__fp_splitA>
 b94:	88 f0       	brcs	.+34     	; 0xbb8 <__fixunssfsi+0x26>
 b96:	9f 57       	subi	r25, 0x7F	; 127
 b98:	90 f0       	brcs	.+36     	; 0xbbe <__fixunssfsi+0x2c>
 b9a:	b9 2f       	mov	r27, r25
 b9c:	99 27       	eor	r25, r25
 b9e:	b7 51       	subi	r27, 0x17	; 23
 ba0:	a0 f0       	brcs	.+40     	; 0xbca <__fixunssfsi+0x38>
 ba2:	d1 f0       	breq	.+52     	; 0xbd8 <__fixunssfsi+0x46>
 ba4:	66 0f       	add	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	1a f0       	brmi	.+6      	; 0xbb4 <__fixunssfsi+0x22>
 bae:	ba 95       	dec	r27
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__fixunssfsi+0x12>
 bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <__fixunssfsi+0x46>
 bb4:	b1 30       	cpi	r27, 0x01	; 1
 bb6:	81 f0       	breq	.+32     	; 0xbd8 <__fixunssfsi+0x46>
 bb8:	77 d0       	rcall	.+238    	; 0xca8 <__fp_zero>
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	08 95       	ret
 bbe:	74 c0       	rjmp	.+232    	; 0xca8 <__fp_zero>
 bc0:	67 2f       	mov	r22, r23
 bc2:	78 2f       	mov	r23, r24
 bc4:	88 27       	eor	r24, r24
 bc6:	b8 5f       	subi	r27, 0xF8	; 248
 bc8:	39 f0       	breq	.+14     	; 0xbd8 <__fixunssfsi+0x46>
 bca:	b9 3f       	cpi	r27, 0xF9	; 249
 bcc:	cc f3       	brlt	.-14     	; 0xbc0 <__fixunssfsi+0x2e>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b3 95       	inc	r27
 bd6:	d9 f7       	brne	.-10     	; 0xbce <__fixunssfsi+0x3c>
 bd8:	3e f4       	brtc	.+14     	; 0xbe8 <__fixunssfsi+0x56>
 bda:	90 95       	com	r25
 bdc:	80 95       	com	r24
 bde:	70 95       	com	r23
 be0:	61 95       	neg	r22
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	08 95       	ret

00000bea <__floatunsisf>:
 bea:	e8 94       	clt
 bec:	09 c0       	rjmp	.+18     	; 0xc00 <__floatsisf+0x12>

00000bee <__floatsisf>:
 bee:	97 fb       	bst	r25, 7
 bf0:	3e f4       	brtc	.+14     	; 0xc00 <__floatsisf+0x12>
 bf2:	90 95       	com	r25
 bf4:	80 95       	com	r24
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	99 23       	and	r25, r25
 c02:	a9 f0       	breq	.+42     	; 0xc2e <__floatsisf+0x40>
 c04:	f9 2f       	mov	r31, r25
 c06:	96 e9       	ldi	r25, 0x96	; 150
 c08:	bb 27       	eor	r27, r27
 c0a:	93 95       	inc	r25
 c0c:	f6 95       	lsr	r31
 c0e:	87 95       	ror	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	b7 95       	ror	r27
 c16:	f1 11       	cpse	r31, r1
 c18:	f8 cf       	rjmp	.-16     	; 0xc0a <__floatsisf+0x1c>
 c1a:	fa f4       	brpl	.+62     	; 0xc5a <__floatsisf+0x6c>
 c1c:	bb 0f       	add	r27, r27
 c1e:	11 f4       	brne	.+4      	; 0xc24 <__floatsisf+0x36>
 c20:	60 ff       	sbrs	r22, 0
 c22:	1b c0       	rjmp	.+54     	; 0xc5a <__floatsisf+0x6c>
 c24:	6f 5f       	subi	r22, 0xFF	; 255
 c26:	7f 4f       	sbci	r23, 0xFF	; 255
 c28:	8f 4f       	sbci	r24, 0xFF	; 255
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	16 c0       	rjmp	.+44     	; 0xc5a <__floatsisf+0x6c>
 c2e:	88 23       	and	r24, r24
 c30:	11 f0       	breq	.+4      	; 0xc36 <__floatsisf+0x48>
 c32:	96 e9       	ldi	r25, 0x96	; 150
 c34:	11 c0       	rjmp	.+34     	; 0xc58 <__floatsisf+0x6a>
 c36:	77 23       	and	r23, r23
 c38:	21 f0       	breq	.+8      	; 0xc42 <__floatsisf+0x54>
 c3a:	9e e8       	ldi	r25, 0x8E	; 142
 c3c:	87 2f       	mov	r24, r23
 c3e:	76 2f       	mov	r23, r22
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <__floatsisf+0x5e>
 c42:	66 23       	and	r22, r22
 c44:	71 f0       	breq	.+28     	; 0xc62 <__floatsisf+0x74>
 c46:	96 e8       	ldi	r25, 0x86	; 134
 c48:	86 2f       	mov	r24, r22
 c4a:	70 e0       	ldi	r23, 0x00	; 0
 c4c:	60 e0       	ldi	r22, 0x00	; 0
 c4e:	2a f0       	brmi	.+10     	; 0xc5a <__floatsisf+0x6c>
 c50:	9a 95       	dec	r25
 c52:	66 0f       	add	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	da f7       	brpl	.-10     	; 0xc50 <__floatsisf+0x62>
 c5a:	88 0f       	add	r24, r24
 c5c:	96 95       	lsr	r25
 c5e:	87 95       	ror	r24
 c60:	97 f9       	bld	r25, 7
 c62:	08 95       	ret

00000c64 <__fp_split3>:
 c64:	57 fd       	sbrc	r21, 7
 c66:	90 58       	subi	r25, 0x80	; 128
 c68:	44 0f       	add	r20, r20
 c6a:	55 1f       	adc	r21, r21
 c6c:	59 f0       	breq	.+22     	; 0xc84 <__fp_splitA+0x10>
 c6e:	5f 3f       	cpi	r21, 0xFF	; 255
 c70:	71 f0       	breq	.+28     	; 0xc8e <__fp_splitA+0x1a>
 c72:	47 95       	ror	r20

00000c74 <__fp_splitA>:
 c74:	88 0f       	add	r24, r24
 c76:	97 fb       	bst	r25, 7
 c78:	99 1f       	adc	r25, r25
 c7a:	61 f0       	breq	.+24     	; 0xc94 <__fp_splitA+0x20>
 c7c:	9f 3f       	cpi	r25, 0xFF	; 255
 c7e:	79 f0       	breq	.+30     	; 0xc9e <__fp_splitA+0x2a>
 c80:	87 95       	ror	r24
 c82:	08 95       	ret
 c84:	12 16       	cp	r1, r18
 c86:	13 06       	cpc	r1, r19
 c88:	14 06       	cpc	r1, r20
 c8a:	55 1f       	adc	r21, r21
 c8c:	f2 cf       	rjmp	.-28     	; 0xc72 <__fp_split3+0xe>
 c8e:	46 95       	lsr	r20
 c90:	f1 df       	rcall	.-30     	; 0xc74 <__fp_splitA>
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <__fp_splitA+0x30>
 c94:	16 16       	cp	r1, r22
 c96:	17 06       	cpc	r1, r23
 c98:	18 06       	cpc	r1, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	f1 cf       	rjmp	.-30     	; 0xc80 <__fp_splitA+0xc>
 c9e:	86 95       	lsr	r24
 ca0:	71 05       	cpc	r23, r1
 ca2:	61 05       	cpc	r22, r1
 ca4:	08 94       	sec
 ca6:	08 95       	ret

00000ca8 <__fp_zero>:
 ca8:	e8 94       	clt

00000caa <__fp_szero>:
 caa:	bb 27       	eor	r27, r27
 cac:	66 27       	eor	r22, r22
 cae:	77 27       	eor	r23, r23
 cb0:	cb 01       	movw	r24, r22
 cb2:	97 f9       	bld	r25, 7
 cb4:	08 95       	ret

00000cb6 <__mulsf3>:
 cb6:	0b d0       	rcall	.+22     	; 0xcce <__mulsf3x>
 cb8:	78 c0       	rjmp	.+240    	; 0xdaa <__fp_round>
 cba:	69 d0       	rcall	.+210    	; 0xd8e <__fp_pscA>
 cbc:	28 f0       	brcs	.+10     	; 0xcc8 <__mulsf3+0x12>
 cbe:	6e d0       	rcall	.+220    	; 0xd9c <__fp_pscB>
 cc0:	18 f0       	brcs	.+6      	; 0xcc8 <__mulsf3+0x12>
 cc2:	95 23       	and	r25, r21
 cc4:	09 f0       	breq	.+2      	; 0xcc8 <__mulsf3+0x12>
 cc6:	5a c0       	rjmp	.+180    	; 0xd7c <__fp_inf>
 cc8:	5f c0       	rjmp	.+190    	; 0xd88 <__fp_nan>
 cca:	11 24       	eor	r1, r1
 ccc:	ee cf       	rjmp	.-36     	; 0xcaa <__fp_szero>

00000cce <__mulsf3x>:
 cce:	ca df       	rcall	.-108    	; 0xc64 <__fp_split3>
 cd0:	a0 f3       	brcs	.-24     	; 0xcba <__mulsf3+0x4>

00000cd2 <__mulsf3_pse>:
 cd2:	95 9f       	mul	r25, r21
 cd4:	d1 f3       	breq	.-12     	; 0xcca <__mulsf3+0x14>
 cd6:	95 0f       	add	r25, r21
 cd8:	50 e0       	ldi	r21, 0x00	; 0
 cda:	55 1f       	adc	r21, r21
 cdc:	62 9f       	mul	r22, r18
 cde:	f0 01       	movw	r30, r0
 ce0:	72 9f       	mul	r23, r18
 ce2:	bb 27       	eor	r27, r27
 ce4:	f0 0d       	add	r31, r0
 ce6:	b1 1d       	adc	r27, r1
 ce8:	63 9f       	mul	r22, r19
 cea:	aa 27       	eor	r26, r26
 cec:	f0 0d       	add	r31, r0
 cee:	b1 1d       	adc	r27, r1
 cf0:	aa 1f       	adc	r26, r26
 cf2:	64 9f       	mul	r22, r20
 cf4:	66 27       	eor	r22, r22
 cf6:	b0 0d       	add	r27, r0
 cf8:	a1 1d       	adc	r26, r1
 cfa:	66 1f       	adc	r22, r22
 cfc:	82 9f       	mul	r24, r18
 cfe:	22 27       	eor	r18, r18
 d00:	b0 0d       	add	r27, r0
 d02:	a1 1d       	adc	r26, r1
 d04:	62 1f       	adc	r22, r18
 d06:	73 9f       	mul	r23, r19
 d08:	b0 0d       	add	r27, r0
 d0a:	a1 1d       	adc	r26, r1
 d0c:	62 1f       	adc	r22, r18
 d0e:	83 9f       	mul	r24, r19
 d10:	a0 0d       	add	r26, r0
 d12:	61 1d       	adc	r22, r1
 d14:	22 1f       	adc	r18, r18
 d16:	74 9f       	mul	r23, r20
 d18:	33 27       	eor	r19, r19
 d1a:	a0 0d       	add	r26, r0
 d1c:	61 1d       	adc	r22, r1
 d1e:	23 1f       	adc	r18, r19
 d20:	84 9f       	mul	r24, r20
 d22:	60 0d       	add	r22, r0
 d24:	21 1d       	adc	r18, r1
 d26:	82 2f       	mov	r24, r18
 d28:	76 2f       	mov	r23, r22
 d2a:	6a 2f       	mov	r22, r26
 d2c:	11 24       	eor	r1, r1
 d2e:	9f 57       	subi	r25, 0x7F	; 127
 d30:	50 40       	sbci	r21, 0x00	; 0
 d32:	8a f0       	brmi	.+34     	; 0xd56 <__mulsf3_pse+0x84>
 d34:	e1 f0       	breq	.+56     	; 0xd6e <__mulsf3_pse+0x9c>
 d36:	88 23       	and	r24, r24
 d38:	4a f0       	brmi	.+18     	; 0xd4c <__mulsf3_pse+0x7a>
 d3a:	ee 0f       	add	r30, r30
 d3c:	ff 1f       	adc	r31, r31
 d3e:	bb 1f       	adc	r27, r27
 d40:	66 1f       	adc	r22, r22
 d42:	77 1f       	adc	r23, r23
 d44:	88 1f       	adc	r24, r24
 d46:	91 50       	subi	r25, 0x01	; 1
 d48:	50 40       	sbci	r21, 0x00	; 0
 d4a:	a9 f7       	brne	.-22     	; 0xd36 <__mulsf3_pse+0x64>
 d4c:	9e 3f       	cpi	r25, 0xFE	; 254
 d4e:	51 05       	cpc	r21, r1
 d50:	70 f0       	brcs	.+28     	; 0xd6e <__mulsf3_pse+0x9c>
 d52:	14 c0       	rjmp	.+40     	; 0xd7c <__fp_inf>
 d54:	aa cf       	rjmp	.-172    	; 0xcaa <__fp_szero>
 d56:	5f 3f       	cpi	r21, 0xFF	; 255
 d58:	ec f3       	brlt	.-6      	; 0xd54 <__mulsf3_pse+0x82>
 d5a:	98 3e       	cpi	r25, 0xE8	; 232
 d5c:	dc f3       	brlt	.-10     	; 0xd54 <__mulsf3_pse+0x82>
 d5e:	86 95       	lsr	r24
 d60:	77 95       	ror	r23
 d62:	67 95       	ror	r22
 d64:	b7 95       	ror	r27
 d66:	f7 95       	ror	r31
 d68:	e7 95       	ror	r30
 d6a:	9f 5f       	subi	r25, 0xFF	; 255
 d6c:	c1 f7       	brne	.-16     	; 0xd5e <__mulsf3_pse+0x8c>
 d6e:	fe 2b       	or	r31, r30
 d70:	88 0f       	add	r24, r24
 d72:	91 1d       	adc	r25, r1
 d74:	96 95       	lsr	r25
 d76:	87 95       	ror	r24
 d78:	97 f9       	bld	r25, 7
 d7a:	08 95       	ret

00000d7c <__fp_inf>:
 d7c:	97 f9       	bld	r25, 7
 d7e:	9f 67       	ori	r25, 0x7F	; 127
 d80:	80 e8       	ldi	r24, 0x80	; 128
 d82:	70 e0       	ldi	r23, 0x00	; 0
 d84:	60 e0       	ldi	r22, 0x00	; 0
 d86:	08 95       	ret

00000d88 <__fp_nan>:
 d88:	9f ef       	ldi	r25, 0xFF	; 255
 d8a:	80 ec       	ldi	r24, 0xC0	; 192
 d8c:	08 95       	ret

00000d8e <__fp_pscA>:
 d8e:	00 24       	eor	r0, r0
 d90:	0a 94       	dec	r0
 d92:	16 16       	cp	r1, r22
 d94:	17 06       	cpc	r1, r23
 d96:	18 06       	cpc	r1, r24
 d98:	09 06       	cpc	r0, r25
 d9a:	08 95       	ret

00000d9c <__fp_pscB>:
 d9c:	00 24       	eor	r0, r0
 d9e:	0a 94       	dec	r0
 da0:	12 16       	cp	r1, r18
 da2:	13 06       	cpc	r1, r19
 da4:	14 06       	cpc	r1, r20
 da6:	05 06       	cpc	r0, r21
 da8:	08 95       	ret

00000daa <__fp_round>:
 daa:	09 2e       	mov	r0, r25
 dac:	03 94       	inc	r0
 dae:	00 0c       	add	r0, r0
 db0:	11 f4       	brne	.+4      	; 0xdb6 <__fp_round+0xc>
 db2:	88 23       	and	r24, r24
 db4:	52 f0       	brmi	.+20     	; 0xdca <__fp_round+0x20>
 db6:	bb 0f       	add	r27, r27
 db8:	40 f4       	brcc	.+16     	; 0xdca <__fp_round+0x20>
 dba:	bf 2b       	or	r27, r31
 dbc:	11 f4       	brne	.+4      	; 0xdc2 <__fp_round+0x18>
 dbe:	60 ff       	sbrs	r22, 0
 dc0:	04 c0       	rjmp	.+8      	; 0xdca <__fp_round+0x20>
 dc2:	6f 5f       	subi	r22, 0xFF	; 255
 dc4:	7f 4f       	sbci	r23, 0xFF	; 255
 dc6:	8f 4f       	sbci	r24, 0xFF	; 255
 dc8:	9f 4f       	sbci	r25, 0xFF	; 255
 dca:	08 95       	ret

00000dcc <__udivmodqi4>:
 dcc:	99 1b       	sub	r25, r25
 dce:	79 e0       	ldi	r23, 0x09	; 9
 dd0:	04 c0       	rjmp	.+8      	; 0xdda <__udivmodqi4_ep>

00000dd2 <__udivmodqi4_loop>:
 dd2:	99 1f       	adc	r25, r25
 dd4:	96 17       	cp	r25, r22
 dd6:	08 f0       	brcs	.+2      	; 0xdda <__udivmodqi4_ep>
 dd8:	96 1b       	sub	r25, r22

00000dda <__udivmodqi4_ep>:
 dda:	88 1f       	adc	r24, r24
 ddc:	7a 95       	dec	r23
 dde:	c9 f7       	brne	.-14     	; 0xdd2 <__udivmodqi4_loop>
 de0:	80 95       	com	r24
 de2:	08 95       	ret

00000de4 <__udivmodhi4>:
 de4:	aa 1b       	sub	r26, r26
 de6:	bb 1b       	sub	r27, r27
 de8:	51 e1       	ldi	r21, 0x11	; 17
 dea:	07 c0       	rjmp	.+14     	; 0xdfa <__udivmodhi4_ep>

00000dec <__udivmodhi4_loop>:
 dec:	aa 1f       	adc	r26, r26
 dee:	bb 1f       	adc	r27, r27
 df0:	a6 17       	cp	r26, r22
 df2:	b7 07       	cpc	r27, r23
 df4:	10 f0       	brcs	.+4      	; 0xdfa <__udivmodhi4_ep>
 df6:	a6 1b       	sub	r26, r22
 df8:	b7 0b       	sbc	r27, r23

00000dfa <__udivmodhi4_ep>:
 dfa:	88 1f       	adc	r24, r24
 dfc:	99 1f       	adc	r25, r25
 dfe:	5a 95       	dec	r21
 e00:	a9 f7       	brne	.-22     	; 0xdec <__udivmodhi4_loop>
 e02:	80 95       	com	r24
 e04:	90 95       	com	r25
 e06:	bc 01       	movw	r22, r24
 e08:	cd 01       	movw	r24, r26
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
